// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: via.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_via_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_via_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_via_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_via_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_via_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_via_2eproto_metadata_getter(int index);
namespace via {
class Boolean;
struct BooleanDefaultTypeInternal;
extern BooleanDefaultTypeInternal _Boolean_default_instance_;
class SignupReq;
struct SignupReqDefaultTypeInternal;
extern SignupReqDefaultTypeInternal _SignupReq_default_instance_;
}  // namespace via
PROTOBUF_NAMESPACE_OPEN
template<> ::via::Boolean* Arena::CreateMaybeMessage<::via::Boolean>(Arena*);
template<> ::via::SignupReq* Arena::CreateMaybeMessage<::via::SignupReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace via {

// ===================================================================

class Boolean PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:via.Boolean) */ {
 public:
  inline Boolean() : Boolean(nullptr) {}
  virtual ~Boolean();
  explicit constexpr Boolean(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Boolean(const Boolean& from);
  Boolean(Boolean&& from) noexcept
    : Boolean() {
    *this = ::std::move(from);
  }

  inline Boolean& operator=(const Boolean& from) {
    CopyFrom(from);
    return *this;
  }
  inline Boolean& operator=(Boolean&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Boolean& default_instance() {
    return *internal_default_instance();
  }
  static inline const Boolean* internal_default_instance() {
    return reinterpret_cast<const Boolean*>(
               &_Boolean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Boolean& a, Boolean& b) {
    a.Swap(&b);
  }
  inline void Swap(Boolean* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Boolean* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Boolean* New() const final {
    return CreateMaybeMessage<Boolean>(nullptr);
  }

  Boolean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Boolean>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Boolean& from);
  void MergeFrom(const Boolean& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Boolean* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "via.Boolean";
  }
  protected:
  explicit Boolean(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_via_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:via.Boolean)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_via_2eproto;
};
// -------------------------------------------------------------------

class SignupReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:via.SignupReq) */ {
 public:
  inline SignupReq() : SignupReq(nullptr) {}
  virtual ~SignupReq();
  explicit constexpr SignupReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignupReq(const SignupReq& from);
  SignupReq(SignupReq&& from) noexcept
    : SignupReq() {
    *this = ::std::move(from);
  }

  inline SignupReq& operator=(const SignupReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignupReq& operator=(SignupReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignupReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignupReq* internal_default_instance() {
    return reinterpret_cast<const SignupReq*>(
               &_SignupReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignupReq& a, SignupReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SignupReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignupReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignupReq* New() const final {
    return CreateMaybeMessage<SignupReq>(nullptr);
  }

  SignupReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignupReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignupReq& from);
  void MergeFrom(const SignupReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignupReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "via.SignupReq";
  }
  protected:
  explicit SignupReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_via_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
    kServiceTypeFieldNumber = 3,
    kAddressFieldNumber = 4,
  };
  // string taskId = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string partyId = 2;
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string serviceType = 3;
  void clear_servicetype();
  const std::string& servicetype() const;
  void set_servicetype(const std::string& value);
  void set_servicetype(std::string&& value);
  void set_servicetype(const char* value);
  void set_servicetype(const char* value, size_t size);
  std::string* mutable_servicetype();
  std::string* release_servicetype();
  void set_allocated_servicetype(std::string* servicetype);
  private:
  const std::string& _internal_servicetype() const;
  void _internal_set_servicetype(const std::string& value);
  std::string* _internal_mutable_servicetype();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:via.SignupReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_via_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Boolean

// bool result = 1;
inline void Boolean::clear_result() {
  result_ = false;
}
inline bool Boolean::_internal_result() const {
  return result_;
}
inline bool Boolean::result() const {
  // @@protoc_insertion_point(field_get:via.Boolean.result)
  return _internal_result();
}
inline void Boolean::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void Boolean::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:via.Boolean.result)
}

// -------------------------------------------------------------------

// SignupReq

// string taskId = 1;
inline void SignupReq::clear_taskid() {
  taskid_.ClearToEmpty();
}
inline const std::string& SignupReq::taskid() const {
  // @@protoc_insertion_point(field_get:via.SignupReq.taskId)
  return _internal_taskid();
}
inline void SignupReq::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:via.SignupReq.taskId)
}
inline std::string* SignupReq::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:via.SignupReq.taskId)
  return _internal_mutable_taskid();
}
inline const std::string& SignupReq::_internal_taskid() const {
  return taskid_.Get();
}
inline void SignupReq::_internal_set_taskid(const std::string& value) {
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignupReq::set_taskid(std::string&& value) {
  
  taskid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:via.SignupReq.taskId)
}
inline void SignupReq::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:via.SignupReq.taskId)
}
inline void SignupReq::set_taskid(const char* value,
    size_t size) {
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:via.SignupReq.taskId)
}
inline std::string* SignupReq::_internal_mutable_taskid() {
  
  return taskid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignupReq::release_taskid() {
  // @@protoc_insertion_point(field_release:via.SignupReq.taskId)
  return taskid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignupReq::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:via.SignupReq.taskId)
}

// string partyId = 2;
inline void SignupReq::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& SignupReq::partyid() const {
  // @@protoc_insertion_point(field_get:via.SignupReq.partyId)
  return _internal_partyid();
}
inline void SignupReq::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:via.SignupReq.partyId)
}
inline std::string* SignupReq::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:via.SignupReq.partyId)
  return _internal_mutable_partyid();
}
inline const std::string& SignupReq::_internal_partyid() const {
  return partyid_.Get();
}
inline void SignupReq::_internal_set_partyid(const std::string& value) {
  
  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignupReq::set_partyid(std::string&& value) {
  
  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:via.SignupReq.partyId)
}
inline void SignupReq::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:via.SignupReq.partyId)
}
inline void SignupReq::set_partyid(const char* value,
    size_t size) {
  
  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:via.SignupReq.partyId)
}
inline std::string* SignupReq::_internal_mutable_partyid() {
  
  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignupReq::release_partyid() {
  // @@protoc_insertion_point(field_release:via.SignupReq.partyId)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignupReq::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {
    
  } else {
    
  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:via.SignupReq.partyId)
}

// string serviceType = 3;
inline void SignupReq::clear_servicetype() {
  servicetype_.ClearToEmpty();
}
inline const std::string& SignupReq::servicetype() const {
  // @@protoc_insertion_point(field_get:via.SignupReq.serviceType)
  return _internal_servicetype();
}
inline void SignupReq::set_servicetype(const std::string& value) {
  _internal_set_servicetype(value);
  // @@protoc_insertion_point(field_set:via.SignupReq.serviceType)
}
inline std::string* SignupReq::mutable_servicetype() {
  // @@protoc_insertion_point(field_mutable:via.SignupReq.serviceType)
  return _internal_mutable_servicetype();
}
inline const std::string& SignupReq::_internal_servicetype() const {
  return servicetype_.Get();
}
inline void SignupReq::_internal_set_servicetype(const std::string& value) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignupReq::set_servicetype(std::string&& value) {
  
  servicetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:via.SignupReq.serviceType)
}
inline void SignupReq::set_servicetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:via.SignupReq.serviceType)
}
inline void SignupReq::set_servicetype(const char* value,
    size_t size) {
  
  servicetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:via.SignupReq.serviceType)
}
inline std::string* SignupReq::_internal_mutable_servicetype() {
  
  return servicetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignupReq::release_servicetype() {
  // @@protoc_insertion_point(field_release:via.SignupReq.serviceType)
  return servicetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignupReq::set_allocated_servicetype(std::string* servicetype) {
  if (servicetype != nullptr) {
    
  } else {
    
  }
  servicetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:via.SignupReq.serviceType)
}

// string address = 4;
inline void SignupReq::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& SignupReq::address() const {
  // @@protoc_insertion_point(field_get:via.SignupReq.address)
  return _internal_address();
}
inline void SignupReq::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:via.SignupReq.address)
}
inline std::string* SignupReq::mutable_address() {
  // @@protoc_insertion_point(field_mutable:via.SignupReq.address)
  return _internal_mutable_address();
}
inline const std::string& SignupReq::_internal_address() const {
  return address_.Get();
}
inline void SignupReq::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignupReq::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:via.SignupReq.address)
}
inline void SignupReq::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:via.SignupReq.address)
}
inline void SignupReq::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:via.SignupReq.address)
}
inline std::string* SignupReq::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignupReq::release_address() {
  // @@protoc_insertion_point(field_release:via.SignupReq.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignupReq::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:via.SignupReq.address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace via

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_via_2eproto
